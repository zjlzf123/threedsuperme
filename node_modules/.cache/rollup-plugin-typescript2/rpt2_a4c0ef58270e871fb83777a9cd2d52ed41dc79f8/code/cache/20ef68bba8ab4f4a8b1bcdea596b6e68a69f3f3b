{"code":"import { __values } from \"tslib\";\r\nimport { loadAsync } from \"jszip\";\r\nvar AvatarSDK = /** @class */ (function () {\r\n    function AvatarSDK(token, url) {\r\n        this.token = token;\r\n        this._auth_header = \"Bearer \" + token;\r\n        this.base_url = url;\r\n        this._x_user_agent = \"asdk.js/0.2 (\" + window.location.host + \")\";\r\n    }\r\n    AvatarSDK.prototype._url = function (url) {\r\n        return new URL(url, this.base_url);\r\n    };\r\n    AvatarSDK.prototype._performRequest = function (url, fetchObj) {\r\n        if (fetchObj === void 0) { fetchObj = {}; }\r\n        var headers = fetchObj[\"headers\"] || {};\r\n        headers[\"Authorization\"] = this._auth_header;\r\n        headers[\"X-User-Agent\"] = this._x_user_agent;\r\n        fetchObj[\"headers\"] = headers;\r\n        return fetch(url, fetchObj);\r\n    };\r\n    AvatarSDK.prototype._jsonResponse = function (responsePromise) {\r\n        return new Promise(function (resolve, reject) {\r\n            responsePromise.then(function (rsp) {\r\n                if (!rsp.ok) {\r\n                    return rsp\r\n                        .json()\r\n                        .then(function (j) {\r\n                        return reject(j);\r\n                    })\r\n                        .catch(function () {\r\n                        return reject(rsp);\r\n                    });\r\n                }\r\n                return rsp.json().then(resolve);\r\n            });\r\n        });\r\n    };\r\n    AvatarSDK.prototype.get_available_parameters = function (pipeline, subtype) {\r\n        var url = this._url(\"/parameters/available/\" + pipeline + \"/\");\r\n        url.searchParams.append(\"pipeline_subtype\", subtype);\r\n        return this._jsonResponse(this._performRequest(url));\r\n    };\r\n    AvatarSDK.prototype.get_available_export_parameters = function (pipeline, subtype) {\r\n        var url = this._url(\"/export_parameters/available/\" + pipeline + \"/\");\r\n        url.searchParams.append(\"pipeline_subtype\", subtype);\r\n        return this._jsonResponse(this._performRequest(url));\r\n    };\r\n    AvatarSDK.prototype.create_avatar = function (name, photo, pipeline, subtype, parameters, export_parameters) {\r\n        var form = new FormData();\r\n        form.append(\"name\", name);\r\n        form.append(\"photo\", photo, photo.name);\r\n        form.append(\"pipeline\", pipeline);\r\n        form.append(\"pipeline_subtype\", subtype);\r\n        form.append(\"parameters\", parameters);\r\n        form.append(\"export_parameters\", export_parameters);\r\n        var url = this._url(\"/avatars/\");\r\n        return this._jsonResponse(this._performRequest(url, {\r\n            method: \"POST\",\r\n            body: form,\r\n        }));\r\n    };\r\n    AvatarSDK.prototype.get_avatar = function (avatar) {\r\n        var url = avatar[\"url\"];\r\n        return this._jsonResponse(this._performRequest(url));\r\n    };\r\n    AvatarSDK.prototype._poll_impl = function (avatar, resolve, reject, onProgress, iIntervalGetter) {\r\n        this.get_avatar(avatar)\r\n            .then(function (j) {\r\n            var status = j[\"status\"];\r\n            if (!!onProgress)\r\n                onProgress(j);\r\n            switch (status) {\r\n                case \"Completed\":\r\n                    clearInterval(iIntervalGetter());\r\n                    return resolve(j);\r\n                case \"Failed\":\r\n                case \"Timed Out\":\r\n                    clearInterval(iIntervalGetter());\r\n                    return reject(j);\r\n                case \"Pending\":\r\n                case \"Uploading\":\r\n                case \"Queued\":\r\n                case \"Computing\":\r\n                    break;\r\n                default:\r\n                    console.log('unknown status \"%s\"', status);\r\n            }\r\n        })\r\n            .catch(function (err) {\r\n            console.log(err);\r\n            clearInterval(iIntervalGetter());\r\n            return reject(err);\r\n        });\r\n    };\r\n    AvatarSDK.prototype.poll_avatar = function (avatar, onProgress) {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            var iInterval = null;\r\n            iInterval = setInterval(_this._poll_impl.bind(_this), 5000, avatar, resolve, reject, onProgress, function () { return iInterval; });\r\n        });\r\n    };\r\n    AvatarSDK.prototype.get_exports = function (avatar) {\r\n        var url = avatar[\"exports\"];\r\n        return this._jsonResponse(this._performRequest(url));\r\n    };\r\n    AvatarSDK.prototype.poll_export = function (avatarExport, onProgress) {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            var iInterval = null;\r\n            iInterval = setInterval(_this._poll_impl.bind(_this), 5000, avatarExport, resolve, reject, onProgress, function () { return iInterval; });\r\n        });\r\n    };\r\n    AvatarSDK.prototype.download_export_file = function (url, filename, useBlob) {\r\n        if (useBlob === void 0) { useBlob = false; }\r\n        if (useBlob) {\r\n            return this._performRequest(url)\r\n                .then(function (r) { return r.blob(); })\r\n                .then(function (b) {\r\n                var fBlob = new File([b], filename, { type: b.type });\r\n                var bUrl = URL.createObjectURL(fBlob);\r\n                return bUrl;\r\n            });\r\n        }\r\n        else {\r\n            var href = new URL(url);\r\n            href.searchParams.append(\"access_token\", this.token);\r\n            return Promise.resolve(href);\r\n        }\r\n    };\r\n    AvatarSDK.prototype._extractZipFiles = function (blob) {\r\n        return loadAsync(blob).then(function (z) {\r\n            var e_1, _a;\r\n            var promises = [];\r\n            var _loop_1 = function (zipFile) {\r\n                if (zipFile.dir)\r\n                    return \"continue\";\r\n                var filename = zipFile.name.split(\"/\");\r\n                filename = filename[filename.length - 1];\r\n                var p = zipFile.async(\"blob\").then(function (b) {\r\n                    var r = {};\r\n                    r[filename] = b;\r\n                    return r;\r\n                });\r\n                promises.push(p);\r\n            };\r\n            try {\r\n                for (var _b = __values(Object.values(z.files)), _c = _b.next(); !_c.done; _c = _b.next()) {\r\n                    var zipFile = _c.value;\r\n                    _loop_1(zipFile);\r\n                }\r\n            }\r\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n            finally {\r\n                try {\r\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\r\n                }\r\n                finally { if (e_1) throw e_1.error; }\r\n            }\r\n            return Promise.all(promises).then(function (blobs) {\r\n                return blobs.reduce(function (a, i) {\r\n                    Object.assign(a, i);\r\n                    return a;\r\n                }, {});\r\n            });\r\n        });\r\n    };\r\n    AvatarSDK.prototype.get_export_file_contents = function (avatarExportFile, onProgress) {\r\n        var _this = this;\r\n        var fileUrl = avatarExportFile[\"file\"];\r\n        var zipFilesPromises = this._performRequest(fileUrl)\r\n            .then(function (response) {\r\n            if (!response.ok) {\r\n                throw Error(response.status + \" \" + response.statusText);\r\n            }\r\n            if (!response.body) {\r\n                throw Error(\"ReadableStream not yet supported in this browser.\");\r\n            }\r\n            // to access headers, server must send CORS header \"Access-Control-Expose-Headers: content-encoding, content-length x-file-size\"\r\n            // server must send custom x-file-size header if gzip or other content-encoding is used\r\n            var contentEncoding = response.headers.get(\"content-encoding\");\r\n            var contentLength = response.headers.get(contentEncoding ? \"x-file-size\" : \"content-length\");\r\n            if (contentLength === null) {\r\n                throw Error(\"Response size header unavailable\");\r\n            }\r\n            var total = parseInt(contentLength, 10);\r\n            var loaded = 0;\r\n            return new Response(new ReadableStream({\r\n                start: function (controller) {\r\n                    var reader = response.body.getReader();\r\n                    read();\r\n                    function read() {\r\n                        reader\r\n                            .read()\r\n                            .then(function (_a) {\r\n                            var done = _a.done, value = _a.value;\r\n                            if (done) {\r\n                                controller.close();\r\n                                return;\r\n                            }\r\n                            loaded += value.byteLength;\r\n                            var pct = Math.round((100.0 * loaded) / total);\r\n                            if (!!onProgress)\r\n                                onProgress(\"Downloading\", pct);\r\n                            controller.enqueue(value);\r\n                            read();\r\n                        })\r\n                            .catch(function (error) {\r\n                            console.error(error);\r\n                            controller.error(error);\r\n                        });\r\n                    }\r\n                },\r\n            }));\r\n        })\r\n            .then(function (r) { return r.blob(); })\r\n            .then(function (blob) {\r\n            if (!!onProgress)\r\n                onProgress(\"Processing\");\r\n            return _this._extractZipFiles(blob);\r\n        });\r\n        return zipFilesPromises;\r\n    };\r\n    return AvatarSDK;\r\n}());\r\nexport { AvatarSDK };\r\n","references":["/Users/vincent/Desktop/threedsuperme/node_modules/jszip/index.d.ts"],"dts":{"name":"/Users/vincent/Desktop/threedsuperme/node_modules/.cache/rollup-plugin-typescript2/placeholder/asdk.d.ts","writeByteOrderMark":false,"text":"export declare class AvatarSDK {\r\n    [key: string]: any;\r\n    constructor(token: string, url: string);\r\n    _url(url: string | URL): URL;\r\n    _performRequest(url: any, fetchObj?: any): Promise<Response>;\r\n    _jsonResponse(responsePromise: Promise<any>): Promise<unknown>;\r\n    get_available_parameters(pipeline: string, subtype: string): Promise<unknown>;\r\n    get_available_export_parameters(pipeline: string, subtype: string): Promise<unknown>;\r\n    create_avatar(name: string, photo: any, pipeline: string, subtype: string, parameters: any, export_parameters: any): Promise<unknown>;\r\n    get_avatar(avatar: {\r\n        [x: string]: any;\r\n    }): Promise<unknown>;\r\n    _poll_impl(avatar: any, resolve: any, reject: any, onProgress: any, iIntervalGetter: any): void;\r\n    poll_avatar(avatar: any, onProgress: any): Promise<unknown>;\r\n    get_exports(avatar: any): Promise<unknown>;\r\n    poll_export(avatarExport: any, onProgress: any): Promise<unknown>;\r\n    download_export_file(url: any, filename: any, useBlob?: boolean): Promise<string> | Promise<URL>;\r\n    _extractZipFiles(blob: any): Promise<any>;\r\n    get_export_file_contents(avatarExportFile: any, onProgress: any): Promise<any>;\r\n}\r\n"}}
