{"code":"import { __read, __values } from \"tslib\";\r\nvar _AS_AVATAR = 'as avatar';\r\nvar _TRUE = 'true';\r\nvar _FALSE = 'false';\r\nvar _ALL_NONE_KEY = '_allNone';\r\nexport function _splitPipeline(value) {\r\n    return value.split('|').map(function (p) { return p.trim(); });\r\n}\r\nexport function _delete_parameters_duplicates(parameters, exportParameters) {\r\n    var subtype = Object.keys(parameters);\r\n    if (!subtype.length)\r\n        return parameters;\r\n    subtype = subtype[0];\r\n    Object.keys(exportParameters).forEach(function (epCat) {\r\n        var present = parameters[subtype].hasOwnProperty(epCat);\r\n        if (!present)\r\n            return;\r\n        delete parameters[subtype][epCat];\r\n    });\r\n    return parameters;\r\n}\r\nexport function _jsonResponse(responsePromise) {\r\n    return new Promise(function (resolve, reject) {\r\n        responsePromise.then(function (rsp) {\r\n            if (!rsp.ok) {\r\n                return rsp.json().then(function (j) {\r\n                    return reject(j);\r\n                }).catch(function () {\r\n                    return reject(rsp);\r\n                });\r\n            }\r\n            return rsp.json().then(resolve);\r\n        });\r\n    });\r\n}\r\nexport function _cmp(a, b) {\r\n    if (a > b)\r\n        return 1;\r\n    if (a < b)\r\n        return -1;\r\n    return 0;\r\n}\r\nexport function _getAvatarExport(exports, asdk, idx) {\r\n    if (idx === void 0) { idx = 0; }\r\n    if (idx > exports.length)\r\n        return undefined;\r\n    if (exports.length > 1) {\r\n        exports.sort(function (a, b) { return _cmp(a['created_on'], b['created_on']); });\r\n    }\r\n    var aExport = exports[idx];\r\n    var isCompleted = aExport['status'] === 'Completed';\r\n    if (!isCompleted)\r\n        return asdk.poll_export(aExport);\r\n    return Promise.resolve(aExport);\r\n}\r\nexport function _now() {\r\n    return Math.round(Date.now() / 1000);\r\n}\r\nexport function _copy(obj) {\r\n    return JSON.parse(JSON.stringify(obj));\r\n}\r\nexport function _convertGuiColor(v) {\r\n    return { 'red': v['r'], 'green': v['g'], 'blue': v['b'] };\r\n}\r\nexport function generateExportParameters(parameters) {\r\n    var _processListParameter = function (listParameter) { return Object.entries(listParameter).reduce(function (a, i) {\r\n        if (i[1] === true)\r\n            a.push(i[0]);\r\n        return a;\r\n    }, []); };\r\n    var _processInheritOptions = function (value) {\r\n        switch (value) {\r\n            case _AS_AVATAR:\r\n                return null;\r\n            case _TRUE:\r\n                return true;\r\n            case _FALSE:\r\n                return false;\r\n        }\r\n        return _copy(value);\r\n    };\r\n    var _processSection = function (root) {\r\n        var e_1, _a;\r\n        var ret = {};\r\n        try {\r\n            for (var _b = __values(Object.entries(root)), _c = _b.next(); !_c.done; _c = _b.next()) {\r\n                var _d = __read(_c.value, 2), key = _d[0], value = _d[1];\r\n                switch (key) {\r\n                    case 'format':\r\n                    case 'embed':\r\n                    case 'pointclouds':\r\n                    case 'embed_textures': {\r\n                        var v = _processInheritOptions(value);\r\n                        if (v === null)\r\n                            continue;\r\n                        ret[key] = v;\r\n                        break;\r\n                    }\r\n                    case 'additional_textures':\r\n                    case 'list': {\r\n                        var v = _processListParameter(value);\r\n                        if (v.length === 0)\r\n                            continue;\r\n                        ret[key] = v;\r\n                        break;\r\n                    }\r\n                    case 'lod':\r\n                    case 'color':\r\n                    case 'texture_size': {\r\n                        // @ts-ignore\r\n                        if (!value['enabled'])\r\n                            continue;\r\n                        // @ts-ignore\r\n                        var v = value['value'];\r\n                        v = (key === 'color') ? _convertGuiColor(v) : _copy(v);\r\n                        ret[key] = v;\r\n                        break;\r\n                    }\r\n                    case 'haircuts':\r\n                    case 'outfits':\r\n                    case 'blendshapes': {\r\n                        var v = _processSection(value);\r\n                        if (Object.keys(v).length === 0)\r\n                            continue;\r\n                        ret[key] = v;\r\n                        break;\r\n                    }\r\n                    case _ALL_NONE_KEY:\r\n                        break;\r\n                    default:\r\n                        console.log('unknown key \"%s\"', key);\r\n                }\r\n            }\r\n        }\r\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n        finally {\r\n            try {\r\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\r\n            }\r\n            finally { if (e_1) throw e_1.error; }\r\n        }\r\n        return ret;\r\n    };\r\n    var ret = _processSection(parameters);\r\n    return ret;\r\n}\r\nexport function _getDefault(obj, key, dflt) {\r\n    if (!(key in obj)) {\r\n        obj[key] = dflt;\r\n    }\r\n    ;\r\n    return obj[key];\r\n}\r\nexport function generateVisualExportParameters(parameters) {\r\n    var e_2, _a, e_3, _b;\r\n    var ret = {\r\n        'format': 'glb',\r\n        'embed': true,\r\n        'embed_textures': true,\r\n    };\r\n    var _keysToCopy = ['lod', 'texture_size', 'color'];\r\n    var _catToCopy = ['', 'haircuts', 'outfits'];\r\n    try {\r\n        for (var _catToCopy_1 = __values(_catToCopy), _catToCopy_1_1 = _catToCopy_1.next(); !_catToCopy_1_1.done; _catToCopy_1_1 = _catToCopy_1.next()) {\r\n            var category = _catToCopy_1_1.value;\r\n            var root = parameters;\r\n            var target = ret;\r\n            if (!!category) {\r\n                root = parameters === null || parameters === void 0 ? void 0 : parameters[category];\r\n                if (root === undefined)\r\n                    continue;\r\n                target = _getDefault(ret, category, {});\r\n                var catList = root.list;\r\n                var valid = (!!catList) && catList.length > 0;\r\n                if (valid) {\r\n                    target['list'] = [catList[0]];\r\n                }\r\n                ;\r\n            }\r\n            try {\r\n                for (var _keysToCopy_1 = (e_3 = void 0, __values(_keysToCopy)), _keysToCopy_1_1 = _keysToCopy_1.next(); !_keysToCopy_1_1.done; _keysToCopy_1_1 = _keysToCopy_1.next()) {\r\n                    var key = _keysToCopy_1_1.value;\r\n                    var value = root === null || root === void 0 ? void 0 : root[key];\r\n                    if (value === undefined)\r\n                        continue;\r\n                    target[key] = value;\r\n                }\r\n            }\r\n            catch (e_3_1) { e_3 = { error: e_3_1 }; }\r\n            finally {\r\n                try {\r\n                    if (_keysToCopy_1_1 && !_keysToCopy_1_1.done && (_b = _keysToCopy_1.return)) _b.call(_keysToCopy_1);\r\n                }\r\n                finally { if (e_3) throw e_3.error; }\r\n            }\r\n        }\r\n    }\r\n    catch (e_2_1) { e_2 = { error: e_2_1 }; }\r\n    finally {\r\n        try {\r\n            if (_catToCopy_1_1 && !_catToCopy_1_1.done && (_a = _catToCopy_1.return)) _a.call(_catToCopy_1);\r\n        }\r\n        finally { if (e_2) throw e_2.error; }\r\n    }\r\n    return ret;\r\n}\r\nexport function visualizeExport(avatarExport, asdk) {\r\n    var e_4, _a;\r\n    var avatarExportFile = undefined;\r\n    try {\r\n        for (var _b = __values(avatarExport['files']), _c = _b.next(); !_c.done; _c = _b.next()) {\r\n            var exportFile = _c.value;\r\n            if (exportFile['identity'] !== 'avatar')\r\n                continue;\r\n            avatarExportFile = exportFile;\r\n            break;\r\n        }\r\n    }\r\n    catch (e_4_1) { e_4 = { error: e_4_1 }; }\r\n    finally {\r\n        try {\r\n            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\r\n        }\r\n        finally { if (e_4) throw e_4.error; }\r\n    }\r\n    var onProgress = function (stage, pct) {\r\n        pct = (!!pct) ? pct + '%' : '';\r\n        console.log(pct);\r\n    };\r\n    asdk.get_export_file_contents(avatarExportFile, onProgress).then(function (modelFiles) {\r\n        console.log(modelFiles);\r\n    });\r\n}\r\n","references":[],"dts":{"name":"/Users/vincent/Desktop/threedsuperme/node_modules/.cache/rollup-plugin-typescript2/placeholder/utils.d.ts","writeByteOrderMark":false,"text":"export declare function _splitPipeline(value: string): string[];\r\nexport declare function _delete_parameters_duplicates(parameters: any, exportParameters: any): any;\r\nexport declare function _jsonResponse(responsePromise: Promise<any>): Promise<unknown>;\r\nexport declare function _cmp(a: number, b: number): 0 | 1 | -1;\r\nexport declare function _getAvatarExport(exports: any, asdk: any, idx?: number): any;\r\nexport declare function _now(): number;\r\nexport declare function _copy(obj: any): any;\r\nexport declare function _convertGuiColor(v: {\r\n    [x: string]: any;\r\n}): {\r\n    red: any;\r\n    green: any;\r\n    blue: any;\r\n};\r\nexport declare function generateExportParameters(parameters: any): any;\r\nexport declare function _getDefault(obj: {\r\n    [x: string]: any;\r\n    format?: string;\r\n    embed?: boolean;\r\n    embed_textures?: boolean;\r\n}, key: string, dflt: {}): any;\r\nexport declare function generateVisualExportParameters(parameters: any): {\r\n    format: string;\r\n    embed: boolean;\r\n    embed_textures: boolean;\r\n};\r\nexport declare function visualizeExport(avatarExport: {\r\n    [x: string]: any;\r\n}, asdk: any): void;\r\n"}}
